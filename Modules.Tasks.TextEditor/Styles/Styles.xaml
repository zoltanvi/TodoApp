<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style
        x:Key="BaseRichTextBoxStyle"
        TargetType="RichTextBox">
        <Setter Property="FontFamily" Value="{Binding Path=AppSettings.TaskSettings.FontFamily, Source={StaticResource AppSettings}, Converter={StaticResource EnumToFontFamilyConverter}}" />
        <Setter Property="FontSize" Value="{Binding Path=AppSettings.TaskSettings.FontSize, Source={StaticResource AppSettings}, Converter={StaticResource FontSizeScaler}}" />
        <Setter Property="Foreground" Value="{DynamicResource OnBackground}" />
        <Setter Property="Background" Value="#00000000" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CaretBrush" Value="{DynamicResource Primary}" />
        <Setter Property="AutoWordSelection" Value="False" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />

        <Style.Resources>
            <Style
                BasedOn="{StaticResource DarkScrollBarStyle}"
                TargetType="{x:Type ScrollBar}" />

            <!--  Fixes line heights in RichTextBoxes  -->
            <Style TargetType="{x:Type Paragraph}">
                <Setter Property="Margin" Value="0" />
            </Style>

        </Style.Resources>
    </Style>


    <Style
        x:Key="TextEditorArrowToggleButtonStyle"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource OnBackground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        SnapsToDevicePixels="true">
                        <Grid Margin="0">

                            <Viewbox VerticalAlignment="Top">
                                <Label
                                    x:Name="ArrowTop"
                                    Margin="0"
                                    Padding="0"
                                    BorderThickness="0"
                                    Content="{StaticResource IconChevronUp}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Style="{StaticResource IconLabelStyle}" />
                            </Viewbox>

                            <Viewbox VerticalAlignment="Top">
                                <Label
                                    x:Name="ArrowDown"
                                    Margin="0"
                                    Padding="0"
                                    BorderThickness="0"
                                    Content="{StaticResource IconChevronDown}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Style="{StaticResource IconLabelStyle}" />
                            </Viewbox>

                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="ArrowDown" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ArrowTop" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ArrowDown" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ArrowTop" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="TextEditorToggleButtonStyle"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0 0" />
        <Setter Property="Foreground" Value="{DynamicResource OnSurface}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Opacity" Value="0.6" />
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={StaticResource UIScaler}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource Surface3}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource InversePrimary}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource InversePrimary}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource InversePrimary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TextEditorButtonStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={StaticResource UIScaler}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource OnSurface}" />
        <Setter Property="Margin" Value="0 0" />
        <Setter Property="Background" Value="{DynamicResource Surface3}" />
        <!--<Setter Property="Padding" Value="5" />-->
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource InversePrimary}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource InversePrimary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>